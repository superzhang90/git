
1、在Linux上安装Git
* 首先，你可以试着输入git，看看系统有没有安装Git：
$ git
$ yum install git

** 安装完成后，还需要最后一步设置，在命令行输入：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

2、 创建版本库
* 创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：
$ mkdir learngit
$ cd learngit
$ pwd
# /home/learngit/testing/

** 通过git init命令把这个目录变成Git可以管理的仓库：
$ git init
# Initialized empty Git repository in /home/learngit/testing/.git/
# 如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。

*** 编写一个readme.txt文件，内容如下：
Git is a version control system.
Git is free software.
#一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。

第一步，用命令git add告诉Git，把文件添加到仓库：
$ git add readme.txt
第二步，用命令git commit告诉Git，把文件提交到仓库：
$ git commit -m "wrote a readme file"
# [master (root-commit) cb926e7] wrote a readme file
# 1 file changed, 2 insertions(+)
# create mode 100644 readme.txt

commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."

小结：
初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
第二步，使用命令git commit，完成。

3、更新版本文件
* 成功地添加并提交了一个readme.txt文件:
Git is a distributed version control system.
Git is free software.

** 运行git status命令看看结果：
$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#    modified:   readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")

*** 用git diff这个命令看看具体修改了什么内容:
$ git diff readme.txt 
# diff --git a/readme.txt b/readme.txt
# index 46d49bf..9247db6 100644
# --- a/readme.txt
# +++ b/readme.txt
# @@ -1,2 +1,2 @@
# -Git is a version control system.
# +Git is a distributed version control system.
#  Git is free software.

**** 知道了对文件做了什么修改，提交修改和提交新文件是git add：
$ git add readme.txt
$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   readme.txt
$ git commit -m "add distributed"
# [master ea34578] add distributed
# 1 file changed, 1 insertion(+), 1 deletion(-)
$ git status
# On branch master
nothing to commit (working directory clean)

小结：
要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

4、版本回退
* 修改提交到Git版本库，再练习一次，修改readme.txt文件如下：
Git is a distributed version control system.
Git is free software distributed under the GPL.
然后提交：
$ git add readme.txt
$ git commit -m "append GPL"
# [master 3628164] append GPL
# 1 file changed, 1 insertion(+), 1 deletion(-)

** 查看版本控制系统们历史记录
$ git log
## 如果嫌输出信息太多，可以简化如下：
$ git log --pretty=oneline

*** 回退上一版本：
##首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交最新ID，
##上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来
##，所以写成HEAD~100。   
$ git reset --hard HEAD^
# HEAD is now at ea34578 add distributed
查看文件内容，查看版本日志：
$ cat readme.txt
$ git log

****　再回到修改前最新版本：记住新版本commit id：
$ git reset --hard 3628164
#　HEAD is now at 3628164 append GPL 
查看文件内容，查看版本日志：
$ cat readme.txt
$ git log

***** 找不到新版本的commit id：
$ git reflog

小结

HEAD指向版本就是当前版本，因此，Git允许在版本历史之间穿梭，用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


5、git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以
   一次性把暂存区的所有修改提交到分支。

6、Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中：
$ 第一次修改 -> git add -> 第二次修改 -> git add -> git commit

7、撤销修改:
* git checkout -- file可以丢弃工作区的修改：(只是修改了文件，未添加缓存和提交)
$ git checkout -- readme.txt
# 命令git  checkout--readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，有两种情况：
# 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
# 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
# 总之，就是让这个文件回到最近一次git commit或git add时的状态。

** 修改只是添加到了暂存区，还没有提交：
$ git status
$ git reset HEAD readme.txt   ##暂存区的修改撤销掉（unstage），重新放回工作区：
# Unstaged changes after reset:
# M       readme.txt
$ git status

小结
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用
     命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是
      没有推送到远程库。




6\ 删除文件后恢复：
# git rm test.txt
# git reset HEAD test.txt
# git checkout -- test.txt

或者直接使用
# git rm test.txt
# git checkout HEAD test.txt






